// Mocks generated by Mockito 5.3.2 from annotations
// in imdb/test/presentation/search/search_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter_riverpod/flutter_riverpod.dart' as _i3;
import 'package:imdb/data/datasources/imdb_api.dart' as _i2;
import 'package:imdb/data/models/movie_detail_response.dart' as _i5;
import 'package:imdb/data/models/movie_search_response.dart' as _i4;
import 'package:imdb/presentation/search/search_page_controller.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeImdbApi_0 extends _i1.SmartFake implements _i2.ImdbApi {
  _FakeImdbApi_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoDisposeProviderRef_1<State> extends _i1.SmartFake
    implements _i3.AutoDisposeProviderRef<State> {
  _FakeAutoDisposeProviderRef_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieSearchResponse_2 extends _i1.SmartFake
    implements _i4.MovieSearchResponse {
  _FakeMovieSearchResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieDetailResponse_3 extends _i1.SmartFake
    implements _i5.MovieDetailResponse {
  _FakeMovieDetailResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SearchPageController].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchPageController extends _i1.Mock
    implements _i6.SearchPageController {
  MockSearchPageController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ImdbApi get imdbApi => (super.noSuchMethod(
        Invocation.getter(#imdbApi),
        returnValue: _FakeImdbApi_0(
          this,
          Invocation.getter(#imdbApi),
        ),
      ) as _i2.ImdbApi);
  @override
  _i3.AutoDisposeProviderRef<dynamic> get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAutoDisposeProviderRef_1<dynamic>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i3.AutoDisposeProviderRef<dynamic>);
  @override
  _i7.Future<_i4.MovieSearchResponse> searchMovieTitle(String? title) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMovieTitle,
          [title],
        ),
        returnValue: _i7.Future<_i4.MovieSearchResponse>.value(
            _FakeMovieSearchResponse_2(
          this,
          Invocation.method(
            #searchMovieTitle,
            [title],
          ),
        )),
      ) as _i7.Future<_i4.MovieSearchResponse>);
  @override
  _i7.Future<_i5.MovieDetailResponse> getMovieDetail(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getMovieDetail,
          [id],
        ),
        returnValue: _i7.Future<_i5.MovieDetailResponse>.value(
            _FakeMovieDetailResponse_3(
          this,
          Invocation.method(
            #getMovieDetail,
            [id],
          ),
        )),
      ) as _i7.Future<_i5.MovieDetailResponse>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
